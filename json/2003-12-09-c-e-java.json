{ layout: 'post',
  title: 'C# e Java',
  published: true,
  categories: [ '.Net', 'Books', 'Web/Tech' ],
  __content: '\n<p>Comecei recentemente a ler um livro que já comprei há dois anos:<br />\n"Programming C#", 1ª edição, por Jesse Liberty (editora O\'Reilly)</p>\n\n<p>Embora o livro já vá na terceira edição, não me apeteceu estar a deitar €50 para o lixo e comprar já o último, que custa €67...</p>\n\n<p>O livro lê-se muito bem - as primeiras 200 páginas passaram num instante, com a sensação de estar a perceber tudo. Pode ser que as partes mais difíceis ainda estejam para vir...</p>\n\n<p>Até agora estou a gostar muito. As parecenças com o Java são extraordinárias, e a funcionalidade básica é quase idêntica, mas existe alguma funcionalidade nova muito interessante. Até aqui acho que quase todas as diferenças são para melhor, tirando algumas pequenas coisas:</p>\n\n<p>1. Não gosto da sintaxe para a implementação de Interfaces. Implementar um interface não é semanticamente a mesma coisa que herdar de uma classe. No entanto, a notação é idêntica para ambos os casos:</p>\n\n<p>C#:<br />\nclass MinhaClasse: MinhaClasseBase, MeuInterface1, MeuInterface2 (argumentos) {}</p>\n\n<p>Java:<br />\nclass MinhaClasse extends MinhaClasseBase implements MeuInterface1, MeuInterface2 (argumentos) {}</p>\n\n<p>Em Java utiliza-se "extends" para herdar de uma classe base, e "implements" para implementar um ou mais interfaces. Além disso, em Java os objectos podem ser directamente instanciados com o tipo do interface:</p>\n\n<p>C#:<br />\nMinhaClasse mc = new MinhaClasse();<br />\nMeuInterface1 mi1 = (MeuInterface1)mc;</p>\n\n<p>Java:<br />\nMeuInterface1 mi1 = new MinhaClasse();</p>\n\n<p>2. Não gosto da opção de tornar todos os métodos não-virtuais, obrigando o programador a adivinhar quais são os métodos que poderão vir a ser modificados por subclasses, e marcá-los com "virtual". Envolve futurologia, e não leva em conta que as necessidades dos utilizadores da classe podem ser bastante diferentes daquilo que o criador da classe imaginou. Pode-se ganhar em velocidade, mas perde-se em flexibilidade, e nestes tempos de CPUs baratos não me parece que a troca se justifique. Em Java todos os métodos são virtuais, a não ser que sejam marcados com "final".</p>\n\n<p>3. Embora consiga perceber que podem ser muito convenientes, não sei se a complexidade adicional introduzida pelo "ref" e "out" se justifica. O Java e dezenas de outras linguagens mostram de forma conclusiva que não são de forma alguma necessários, e sabe-se que podem introduzir bugs difíceis de detectar, visto que aumentam o número de vias de comunicação entre métodos e os blocos de código que os invocam. Nalgumas linguagens funcionais modernas, como ML, Caml e Haskell, é até impossível modificar qualquer dos argumentos fornecidos a uma função, em concordância com a filosofia de "Functions should have no side-effects", que elimina duma só penada toda uma categoria de bugs. A informação entra na função unicamente através dos parâmetros que lhe são passados, e a informação sai da função unicamente através do valor devolvido pelo "return" ou equivalente.</p>\n\n<p>4. Não consegui perceber ainda muito bem a diferença entre as keywords "new" e "overrides", mas parece-me que ambas seriam desnecessárias caso todos os métodos fossem virtuais por defeito.</p>\n\n<p>Gosto muito das seguintes funcionalidades que não existem ainda em Java:<br />\n1. Properties<br />\n2. Enums<br />\n3. Arrays rectangulares<br />\n4. Foreach<br />\n5. Structs<br />\n6. Sobrecarga de operadores (para usar com contenção, mas muito útil)<br />\n7. Existência de um tipo decimal nativo<br />\n8. Boxing automático<br />\n9. Indexadores<br />\n10. Atributos são privados por defeito<br />\n11. Unificação de tipos primitivos com</p>\n\n<p>Destas, o Java 1.5, que já está a circular em beta, implementa: 2. Enums; 4. Foreach; e 8. Boxing E UNBOXING automático, bem como algumas outras coisas:<br />\n<a href="http://java.sun.com/features/2003/05/bloch_qa.html">Entrevista com Joshua Bloch sobre Java 1.5</a></p>\n\n<p>Outras coisas que me parecem interessantes, mas que ainda não estudei:<br />\n- Delegates<br />\n- XML docstrings<br />\n- Events<br />\n- Attributes</p>\n\n<p>Coisas que ainda não existem em C#:<br />\n- Anonymous Inner Classes<br />\n- Real Inner Classes (not Nested Classes)<br />\n- Generics (Java 1.5)</p>\n\n<p>No entanto, não posso dizer que sinta muito a falta das 2 primeiras, que sempre achei pouco elegantes (especialmente as "Inner Classes"), embora sejam muito poderosas. Por aquilo que li, pareceu-me também que o C# não tem Asserções (Java: "assert").</p>\n\n<p>Esta página tem links para uma série de comparações interessantes de C# com Java:<br />\n<a href="http://www.cs.wisc.edu/~plakal/538/cs/Csharp.html">http://www.cs.wisc.edu/~plakal/538/cs/Csharp.html</a></p>\n\n<p>As mais interessantes são:<br />\n<a href="http://www.25hoursaday.com/CsharpVsJava.html">A comparison of Microsoft\'s C# Programming Language to Sun Microsystems\' Java Programming Language</a> - Artigo longo de 2001 por Dare Obasanjo, um empregado da Microsoft que costuma escrever sobre XML.<br />\n<a href="http://genamics.com/developer/csharp_comparative.htm">A Comparative Overview of C#</a> - Artigo de 2000 por Ben Albahari, da Genamics.</p>\n\n<p>Conclusão:</p>\n\n<p>No papel, o C# é decididamente uma linguagem mais expressiva e poderosa que a linguagem de programação Java (JPL - Java Programming Language), mas é também uma linguagem mais vasta e mais complexa. Se a imitação é a forma mais sincera de elogio, espero que os arquitectos do Java retribuam o grande elogio que o C# lhes prestou. Resta ainda ver se a utilização real da linguagem corresponde às altas expectativas que este livro despertou em mim.</p>\n\n<p>É claro que o C# não se destina a ser utilizado no vácuo, mas sim em conjunção com a plataforma .Net, que tem essencialmente dois componentes:<br />\n- a máquina virtual .Net, designada por CLR (Common Language Runtime), correspondente à JVM (Java Virtual Machine)<br />\n- a biblioteca de classes FCL (Framework Class Library), correspondente à JCL (Java Class Library)<br />\nComo hoje em dia os programadores não usam linguagens, mas sim plataformas, seria mais justo comparar não as linguagens de programação C# e Java mas sim as plataformas Java (JPL/JCL/JVM) e C#.Net (C#/FCL/CLR). O facto de a máquina virtual Java estar gratuitamente disponível para Windows, Linux, MacOSX e Solaris, entre outros, significa que a plataforma Java tem pelo menos uma vantagem considerável em relação à plataforma .Net.</p>\n\n' }
