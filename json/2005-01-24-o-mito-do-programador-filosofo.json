{ layout: 'post',
  title: 'O Mito do Programador-Filósofo',
  published: true,
  category: [ 'Web/Tech' ],
  __content: '\n<p>No seguinte de uma discussão que tivemos num jantar recente, o Aristarco pergunta em <a title="F�sicosLX: Linguagens" href="http://fisicoslx.blogspot.com/2005/01/linguagens.html">FísicosLX: Linguagens</a>:</p><blockquote><p>Para que serve uma linguagem de programação? Para pôr em prática\nalgoritmos previamente estabelecidos, da forma mais eficiente possível,\nou para ajudar a pensar nos problemas a resolver?</p></blockquote><p>Paul Graham respondeu melhor que ninguém no seu famoso ensaio <a href="http://www.paulgraham.com/hp.html">Hackers and Painters</a>:</p><blockquote><p>A\nprogramming language is for thinking of programs, not for expressing\nprograms you\'ve already thought of. It should be a pencil, not a pen.</p></blockquote><p>Muitos\nnão-programadores imaginam a programação como uma tarefa trivial, que\nconsiste na mera transposição de algoritmos para código. Na realidade,\na programação de aplicações não-triviais é um processo iterativo, em\nque a percepção do problema se vai desenvolvendo e soluções antigas são\ncontinuamente refinadas ou descartadas em favor de novas abordagens.</p>\n\n<p>O mito do programador-filósofo,\nque concebe abstractamente os seus programas para só no final os\ntraduzir para código, é semelhante à visão que muitos leigos têm da\nforma como a matemática é produzida: como se os criadores de teoremas\nchegassem aos mesmos usando um processo mental semelhante ao da prova,\nquando a realidade é que a prova do teorema é o resultado de um longo\nprocesso iterativo em que os andaimes vão sendo eliminados até\npraticamente não restar nenhum vestígio de que o teorema não nasceu já\nperfeitamente formado.</p>\n\n' }
